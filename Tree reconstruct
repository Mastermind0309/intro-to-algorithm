#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int buildtree( vector<pair<int, int>> &v, vector<int> &pre, vector<int> &in,vector<int> &map_in,  int l,int r, int  &i)
{
    if(r<l) return -1;
    int here = pre[i];
    int where = map_in[here];
    if(where<l||where>r) return -1;
    else i++;
    v[here].first=buildtree(v,pre,in,map_in,l,where-1, i);
    v[here].second=buildtree(v,pre,in,map_in, where+1, r, i);
    return here;
}
void dfs( int i , vector<pair<int, int>> &v)
{
    if(v[i].first!=-1) dfs(v[i].first, v);
    if(v[i].second!=-1) dfs(v[i].second, v);
    cout<<i<<" ";
}
int main()
{
    int n;
    cin>>n;
    vector<int> pre;
    vector<int> in;
    vector<pair<int, int>> v(n+1, pair<int, int> (-1,-1));
    int tmp;
    for (int i=0; i<n; i++)
    {
        cin>>tmp;
        pre.push_back(tmp);
    }
    for( int i=0; i<n; i++)
    {
        cin>>tmp;
        in.push_back(tmp);
    }
    vector<int> map_in(n+1, -1);
    for(int i=0; i<n; i++)
    {
        map_in[in[i]]=i;
    }
    int begin=0;
    int root= buildtree(v, pre, in, map_in, 0,n-1,begin);
    dfs(root, v);
    cout<<endl;
    
}
